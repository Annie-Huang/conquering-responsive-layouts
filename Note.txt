https://courses.kevinpowell.co/courses/conquering-responsive-layouts
Flexbox Tutorial - Building a simple layout with Flexbox (https://www.youtube.com/watch?v=JqJNhM8i-nc&list=PL4-IK0AVhVjMSb9c06AjRlTpvxL3otpUd&index=3)
https://codepen.io/kevinpowell/pen/xrWKBE
Flexbox basics (https://www.youtube.com/playlist?list=PL4-IK0AVhVjMSb9c06AjRlTpvxL3otpUd)


https://github.com/Annie-Huang/conquering-responsive-layouts

https://www.figma.com/file/dGPcL6Ym2avOt4736aHb2B/conquer-responsive-layout-week-1-final-challenge?node-id=0%3A1
https://fonts.google.com/specimen/Roboto?query=roboto
https://fonts.google.com/specimen/Roboto?query=roboto&sidebar.open=true&selection.family=Roboto:wght@400;900

==========================================================================
Day 1 | Using percentages & avoiding heights
Day 2 | Getting familiar with relative units
Day 3 | Enter max-width
Day 4 | Extra curricular activities
Day 5 | Practice time!
Day 6 | Review
Day 7 | Solution to challenge #3
Day 8 | Flexbox Basics                  << 02-3-challenge
Day 9 | A deeper dive into flexbox      << 02-6-challenge2
Day 10 | Extra curricular activities    << Flexbox-FlexboxBasicLayout
Day 11 | Using flexbox for a navigation << nav-challenge
Day 12 | Getting fancy with navigations << flexbox-challenge-4
Day 13/14
Day 15 | Intro to media queries         << nav-challenge
Day 16 | What breakpoints to use?       << nav-challenge
Day 17 | The viewport meta tag
Day 18 | Challenge solution & Mobile-first      << flexbox-challenge-4
Day 19 | Mobile navigation challenge            << nav-challenge-1
Day 20 | Mobile navigation challenge solution   << nav-challenge-1
Day 21 | You've done it!                        << nav-challenge-2

==========================================================================

C:\react\conquering-responsive-layouts>npm init -y


1. Set % on width to keep the responsiveness
2. Avoid to set height. Set padding on element instead of height:10px to give more background
3. Set the max-width on your container, you don't want to container goes forever big along with the window size, (human head doesn't like to move to read text)
4. Use rem for font-size, margin. And em for padding, margin (button margin should still use rem if you want between buttons set the same space)
5. Can consider use vh on front-size for big big title, rather than em|rem
6. Good to set img {max-width 100%} so it will shrink with the window but never go above its original size when stretch.
7. Generally the gap between each line in h1-h4 is big. You can make it smaller but giving a line-height close to 1 but Need to check
   when in smaller screen whether each line may overlap each other. e.g. the 'p' in line 1 with the 'h' in line 2
8. It's better to set min-height over vh in a section in case your content increase.
9. Always remove all the padding and margin for ul, li. So you can better control rather than rely on default value on each browser which maybe different.

Summary:
- Webistes are responsive before we write any CSS
- When our layouts run into issues, we're at fault
- Usually (though not always), a desktop-first approach is the culprit
- Writing mobile-first CSS tends to be the easier way to approach it as well, even if you only have a desktop layout to base things off of




